- name: Scanning base {{ dotfiles_name }} dotfile folder
  register: base_dir
  ansible.builtin.find:
      paths: '{{ playbook_dir }}/dotfiles/{{ dotfiles_path }}'
      file_type: directory
      excludes: '*tasks'
      hidden: true
  tags: '{{ dotfiles_tags }}'

- name: Scanning {{ dotfiles_name }} dotfile folder
  register: config_dir
  ansible.builtin.find:
      paths: '{{ item.path }}'
      file_type: any
      hidden: true
  loop: '{{ base_dir.files }}'
  loop_control:
      label: '{{ item.path }}'
  tags: '{{ dotfiles_tags }}'

- name: Removing {{ dotfiles_name }} dotfiles
  ansible.builtin.file:
      dest: >-
          {{ HOME_DIR }}/{{
            item[1].path.split('/')[-2:] | join('/') if (item[1] is mapping and 'path' in item[1]) 
            else item | basename
          }}
      state: absent
  loop: >-
      {{
        lookup('fileglob', '{{ playbook_dir }}/dotfiles/{{ dotfiles_path }}/*', wantlist=True)
        +
        lookup('fileglob', '{{ playbook_dir }}/dotfiles/{{ dotfiles_path }}/.*', wantlist=True)
        +
        q('subelements', config_dir.results, 'files', {'skip_missing': True})
      }}
  loop_control:
      label: >-
          {{
            item[1].path if (item[1] is mapping and 'path' in item[1]) 
            else item
          }}
  tags: '{{ dotfiles_tags }}'

- name: Installing {{ dotfiles_name }} dotfiles
  ansible.builtin.file:
      src: >-
          {{
            item[1].path if (item[1] is mapping and 'path' in item[1]) 
            else item
          }}
      dest: >-
          {{ HOME_DIR }}/{{
            item[1].path.split('/')[-2:] | join('/') if (item[1] is mapping and 'path' in item[1]) 
            else item | basename
          }}
      state: link
  loop: >-
      {{
        lookup('fileglob', '{{ playbook_dir }}/dotfiles/{{ dotfiles_path }}/*', wantlist=True)
        +
        lookup('fileglob', '{{ playbook_dir }}/dotfiles/{{ dotfiles_path }}/.*', wantlist=True)
        +
        q('subelements', config_dir.results, 'files', {'skip_missing': True})
      }}
  loop_control:
      label: >-
          {{
            item[1].path if (item[1] is mapping and 'path' in item[1]) 
            else item
          }}
  tags: '{{ dotfiles_tags }}'
